import os
from dotenv import load_dotenv
from pathlib import Path
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (ApplicationBuilder, MessageHandler, filters,
                          CommandHandler, ContextTypes, ConversationHandler)
from openai import OpenAI
from hebrew_to_image import create_hebrew_image

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path=Path(__file__).resolve().parent / ".env")
openai_api_key = os.getenv("OPENAI_API_KEY")
telegram_token = os.getenv("TELEGRAM_API_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=openai_api_key)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_MODE, TRANSLATING = range(2)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
mode_keyboard = [["üáÆüá± –ò–≤—Ä–∏—Ç ‚Üí —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π"],
                 ["üá∑üá∫ –†—É—Å—Å–∫–∏–π ‚Üí –∏–≤—Ä–∏—Ç ‚Üí —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π"]]
mode_markup = ReplyKeyboardMarkup(mode_keyboard, resize_keyboard=True)


# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞:",
                                    reply_markup=mode_markup)
    return CHOOSING_MODE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
async def choose_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = update.message.text
    context.user_data["mode"] = mode
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                                    reply_markup=ReplyKeyboardMarkup(
                                        [["üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º"]],
                                        resize_keyboard=True))
    return TRANSLATING


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∑–∞–Ω–æ–≤–æ:",
                                        reply_markup=mode_markup)
        return CHOOSING_MODE

    mode = context.user_data.get("mode")
    output_path = "hebrew_output.png"

    if mode == "üáÆüá± –ò–≤—Ä–∏—Ç ‚Üí —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π":
        create_hebrew_image(text, output_path)

    elif mode == "üá∑üá∫ –†—É—Å—Å–∫–∏–π ‚Üí –∏–≤—Ä–∏—Ç ‚Üí —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π":
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ –∏–≤—Ä–∏—Ç —á–µ—Ä–µ–∑ OpenAI
        prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–≤—Ä–∏—Ç:\n\n{text}"
        response = client.chat.completions.create(model="gpt-4",
                                                  messages=[{
                                                      "role": "user",
                                                      "content": prompt
                                                  }])
        hebrew_translation = response.choices[0].message.content.strip()
        create_hebrew_image(hebrew_translation, output_path)

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Å –ø–æ–º–æ—â—å—é /start.")
        return CHOOSING_MODE

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    with open(output_path, "rb") as img:
        await update.message.reply_photo(photo=img)
    return TRANSLATING


# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫, –ø–æ–∫–∞!",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(telegram_token).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING_MODE:
        [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_mode)],
        TRANSLATING:
        [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

from keep_alive import keep_alive
import threading
import os

if name == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞–ø—Ç–∞–π–º–∞
    threading.Thread(target=keep_alive).start()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()
